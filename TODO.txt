=============================================================================
MAKERMATRIX TODO - UPDATED October 22, 2025
=============================================================================

IMPORTANT: Complete security testing BEFORE starting new features!

=============================================================================
üîê IMMEDIATE PRIORITY: SECURITY TESTING (DO THIS FIRST!)
=============================================================================

The October 2025 security audit identified 9 critical vulnerabilities (CVEs).
ALL 9 HAVE BEEN FIXED. You MUST verify the fixes work before proceeding.

## How to Test Security Fixes:

### 1. Run the Security Test Suite (5 minutes)

```bash
cd /home/ril3y/MakerMatrix

# Run all critical security tests (fast - 30 seconds)
./venv_test/bin/pytest tests/test_security_fixes.py -v -m critical

# Run all security tests (comprehensive - 2-3 minutes)
./venv_test/bin/pytest tests/test_security_fixes.py -v

# Expected Result: All 51 tests should PASS ‚úÖ
```

### 2. Test Specific Security Fixes:

```bash
# Test CVE-001: Authorization bypass fix (admin role enforcement)
./venv_test/bin/pytest tests/test_security_fixes.py::TestCVE001_AuthorizationBypass -v

# Test CVE-002: Command injection fix (backup names)
./venv_test/bin/pytest tests/test_security_fixes.py::TestCVE002_CommandInjection -v

# Test CVE-003: SSRF protection fix (datasheet URLs)
./venv_test/bin/pytest tests/test_security_fixes.py::TestCVE003_SSRF -v

# Test CVE-009: Rate limiting fix
./venv_test/bin/pytest tests/test_security_fixes.py::TestCVE009_RateLimiting -v
```

### 3. Manual API Key Testing:

The test API key is: YOUR_API_KEY_HERE

Test that this key CANNOT create admin-only backups:

```bash
# This should return 403 Forbidden (not 200 OK)
curl -X POST https://10.2.0.2:8443/api/tasks/quick/database_backup \
  -H "X-API-Key: YOUR_API_KEY_HERE" \
  -H "Content-Type: application/json" \
  -d '{
    "backup_name": "test_backup",
    "include_datasheets": false,
    "include_images": false
  }' \
  -k

# Expected: {"detail":"Admin access required..."}
```

Test that command injection is blocked:

```bash
# This should return 400 Bad Request (validation error)
curl -X POST https://10.2.0.2:8443/api/tasks/quick/database_backup \
  -H "X-API-Key: YOUR_ADMIN_KEY_HERE" \
  -H "Content-Type: application/json" \
  -d '{
    "backup_name": "backup; whoami",
    "include_datasheets": false,
    "include_images": false
  }' \
  -k

# Expected: {"detail":"backup_name can only contain..."}
```

### 4. Check Security Documentation:

Read the security remediation summary:
```bash
cat tests/SECURITY_REMEDIATION_COMPLETE.md
cat tests/SECURITY_TESTING.md
```

### 5. Verify All CVEs are Fixed:

‚úÖ CVE-001: Authorization Bypass - FIXED (admin role enforcement)
‚úÖ CVE-002: Command Injection - FIXED (strict validation)
‚úÖ CVE-003: SSRF - FIXED (URL/IP validation)
‚úÖ CVE-004: Path Traversal (part_id) - FIXED (path checks)
‚úÖ CVE-005: Alt Command Injection - FIXED (covered by CVE-002)
‚úÖ CVE-006: Path Traversal (file imports) - FIXED (path checks)
‚úÖ CVE-007: Malicious Capabilities - FIXED (whitelist)
‚úÖ CVE-008: Parameter Injection - FIXED (input filtering)
‚úÖ CVE-009: Rate Limiting - FIXED (enforcement integrated)

Risk Reduction: 85% (CRITICAL ‚Üí LOW)

=============================================================================
üìã FEATURE TASKS (Do these AFTER security testing passes)
=============================================================================

Work on ONE task at a time. Each task needs:
1. Start a new full-stack developer agent for the task
2. Create tests (frontend & backend)
3. Tests must pass
4. Git commit when complete
5. Move to next task

=============================================================================
üêõ PRIORITY BUGS (Fix These First)
=============================================================================

BUG-001: Location Rename Loses Allocation Reference
-------------------------------------------------------
When we rename a location that has allocations, it loses the reference to
those allocations.

Test:
1. Create location with parts allocated
2. Rename the location
3. Check if allocations still reference the location

Fix Location:
- Backend: Check location update logic in location_service.py
- Database: Verify foreign key relationships
- Frontend: Ensure UI updates allocation references


BUG-002: Location Image Lost on Update
-------------------------------------------------------
When updating a location after it has an image, it loses the image on update.

Test:
1. Create location with image
2. Update location name
3. Verify image is still there

Fix Location:
- Backend: services/data/location_service.py
- Check image handling in update logic


BUG-003: Part Emoji Not Saved on Initial Creation
-------------------------------------------------------
When adding a part, the emoji does not save on initial creation. If we edit
the part and add emoji, then it saves.

Test:
1. Create new part with emoji selected
2. Save part
3. Reload part and check if emoji persists

Fix Location:
- Frontend: components/parts/AddPartModal.tsx
- Backend: routers/parts_routes.py or services/data/part_service.py
- Check if emoji field is included in initial create request


=============================================================================
üÜï NEW FEATURES (Implement After Bugs Fixed)
=============================================================================

FEATURE-001: Tool Management System
-------------------------------------------------------
Tools are different from parts (usually 1 tool, not 5000 resistors).
Need new model that:
- Uses categories, locations like parts
- NOT analytics like "low stock"
- Supports tools AND parts in same container (toolbox with parts & tools)

Ultrathink Requirements:
- Should we extend Part model or create new Tool model?
- Shared containers need polymorphic relationship
- UI needs tool-specific views (no quantity tracking?)

Test Requirements:
- CRUD operations for tools
- Tool allocation to containers
- Mixed part/tool containers
- Search and filtering


FEATURE-002: Tagging System
-------------------------------------------------------
Lightweight tags for parts and tools (like #todo, #testing, #needs-label).

Requirements:
- String-based tags
- Apply to parts AND tools
- Multiple tags per item
- Filter/search by tags

Implementation:
- Database: tags table + junction tables (part_tags, tool_tags)
- Backend: Tag CRUD endpoints
- Frontend: Tag selector component, tag filtering

Test Requirements:
- Add/remove tags
- Filter by tags
- Tag persistence


FEATURE-003: Favorites for Parts
-------------------------------------------------------
Star frequently-used parts to add to favorites.

Requirements:
- Per-user favorites
- Quick access to favorite parts
- Persist across sessions

Implementation:
- Database: user_favorites table or JSON column
- Backend: Favorite endpoints (add, remove, list)
- Frontend: Star icon, favorites view

Test Requirements:
- Add to favorites
- Remove from favorites
- View favorites list
- Favorites persist


FEATURE-004: Enhanced Location Builder
-------------------------------------------------------
Currently tedious to add SMT containers one-by-one.

Requirements:
1. Clone location (copy everything including parent, with new name or random)
2. Bulk create with templating:
   - SMT Casset - {rand:4} ‚Üí SMT Casset - AV4D, SMT Casset - B3K2, etc.
   - SMT Casset - {seq:01-10} ‚Üí SMT Casset - 01, SMT Casset - 02, ..., SMT Casset - 10
   - Combination: {seq:01-10}-{rand:2} ‚Üí 01-AB, 02-CD, etc.

Implementation:
- Reuse printer label templating system (extract to shared module)
- Backend: Bulk location creation endpoint
- Frontend: Template builder UI

Test Requirements:
- Clone single location
- Bulk create with {rand:X}
- Bulk create with {seq:XX-YY}
- Bulk create with combination templates
- Verify all locations created correctly


=============================================================================
üóÇÔ∏è DATABASE & BACKUP SYSTEM
=============================================================================

FEATURE-005: Complete Database Backup System
-------------------------------------------------------
Ensure database backup on Settings page is complete and working.

Current State:
- Suppliers saved ‚úì
- Images saved ‚úì
- Favicons saved ‚úì
- Credentials in env file (might want in DB?)

Requirements:
- Bundle DB file + all images + datasheets + favicons in single backup
- Simple restore from file backup
- Test backup/restore cycle

Implementation:
- Check backup_scheduler.py and backup routes
- Verify all static files included
- Create restore endpoint

Test Requirements:
- Create backup
- Verify all files included
- Restore from backup
- Verify data integrity


=============================================================================
üîç ENRICHMENT FIXES
=============================================================================

FEATURE-006: Standardize Datasheet Storage
-------------------------------------------------------
Datasheets for digikey, mouser, lcsc not working correctly.

Issues:
- Different additional_properties keys per supplier
- Frontend doesn't know where to look for datasheets

Solution:
- Standardize datasheet location in additional_properties
- Backend supplier code maps to standard key
- Frontend always looks in same place

Implementation:
- Check suppliers/*.py files
- Update map_to_standard_format() in each supplier
- Verify frontend datasheet display logic

Test Requirements:
- Enrich part from each supplier
- Verify datasheet URL in standard location
- Test frontend datasheet display


=============================================================================
ü§ñ AI INTEGRATION
=============================================================================

FEATURE-007: Fix Ollama AI Integration
-------------------------------------------------------
Enabling AI for Ollama is janky and errors.

Issues:
- Current prompt teaches SQL lookups (not right for 7b models)
- Should use API or setup MCP server?

Ultrathink:
- 7b models better with API descriptions than SQL
- MCP server might be overkill
- Update prompt to use REST API instead of SQL

Implementation:
- Update AI prompt in ai_config
- Test with Ollama 7b model
- Document which models work well

Test Requirements:
- Enable Ollama AI
- Test common queries
- Verify no errors


=============================================================================
üé® UI IMPROVEMENTS
=============================================================================

FEATURE-008: Remove Part from Project (UI Button)
-------------------------------------------------------
On project details page, add button to remove part from project.

Requirements:
- X or trash icon on each part in project view
- Confirmation dialog
- Update project after removal

Implementation:
- Frontend: projects/ProjectDetailsPage.tsx
- Backend: Endpoint already exists?
- Use existing icon style for consistency

Test Requirements:
- Remove part from project
- Verify part removed
- Verify other parts unaffected


=============================================================================
üìù TASK WORKFLOW
=============================================================================

For EACH task above:

1. READ the relevant files first
2. START new fullstack-developer agent
3. IMPLEMENT the feature/fix
4. WRITE tests (backend pytest + frontend if needed)
5. RUN tests until they PASS
6. GIT COMMIT with descriptive message
7. MOVE to next task

Check GitHub workflows in .github/workflows/ - tests must pass there too!

=============================================================================
‚úÖ COMPLETION CRITERIA
=============================================================================

Security Testing:
- [ ] All 51 security tests passing
- [ ] Manual API key test confirms 403 for admin endpoints
- [ ] Manual command injection test confirms 400 validation error
- [ ] Security documentation reviewed

Bug Fixes:
- [ ] BUG-001: Location rename preserves allocations
- [ ] BUG-002: Location image persists on update
- [ ] BUG-003: Part emoji saves on initial creation

Features:
- [ ] FEATURE-001: Tool management system
- [ ] FEATURE-002: Tagging system
- [ ] FEATURE-003: Favorites for parts
- [ ] FEATURE-004: Enhanced location builder
- [ ] FEATURE-005: Complete backup system
- [ ] FEATURE-006: Standardized datasheets
- [ ] FEATURE-007: Fixed Ollama AI
- [ ] FEATURE-008: Remove part from project UI

Once ALL tasks completed - NOTIFY USER!

=============================================================================
